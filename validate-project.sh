#!/bin/bash

# Script de valida√ß√£o do projeto
# Verifica se tudo est√° correto antes do deployment

echo "üîç =============================================="
echo "üîç VALIDA√á√ÉO DO PROJETO"
echo "üîç $(date)"
echo "üîç =============================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

error() {
    echo -e "${RED}[ERRO]${NC} $1"
}

success() {
    echo -e "${GREEN}[OK]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[AVISO]${NC} $1"
}

# Contador de erros
ERRORS=0

# Fun√ß√£o para incrementar erros
add_error() {
    ERRORS=$((ERRORS + 1))
    error "$1"
}

# Verificar arquivos essenciais
log "Verificando arquivos essenciais..."

essential_files=(
    "Dockerfile"
    ".dockerignore"
    "package.json"
    "apps/admin/package.json"
    "apps/admin/next.config.js"
    "server/package.json"
    "server/src/index.js"
    "server/prisma/schema.prisma"
)

for file in "${essential_files[@]}"; do
    if [[ -f "$file" ]]; then
        success "‚úì $file"
    else
        add_error "‚úó $file n√£o encontrado"
    fi
done

# Verificar se n√£o h√° diret√≥rios problem√°ticos
log "Verificando estrutura de diret√≥rios..."

if [[ -d "packages" ]]; then
    add_error "Diret√≥rio 'packages' ainda existe (deve ser removido)"
else
    success "‚úì Diret√≥rio 'packages' n√£o existe"
fi

if [[ -d "apps/widget" ]]; then
    warning "Diret√≥rio 'apps/widget' existe mas n√£o √© usado"
fi

# Verificar package.json
log "Verificando package.json..."

if grep -q '"packages/\*"' package.json; then
    add_error "package.json ainda referencia 'packages/*' nos workspaces"
else
    success "‚úì package.json n√£o referencia packages/*"
fi

if grep -q 'dev:widget' package.json; then
    add_error "package.json ainda referencia scripts do widget"
else
    success "‚úì package.json n√£o referencia scripts do widget"
fi

# Verificar next.config.js
log "Verificando next.config.js..."

if grep -q 'appDir.*true' apps/admin/next.config.js; then
    add_error "next.config.js usa configura√ß√£o depreciada 'appDir: true'"
else
    success "‚úì next.config.js n√£o usa configura√ß√£o depreciada"
fi

# Verificar Dockerfile
log "Verificando Dockerfile..."

if grep -q 'COPY packages/' Dockerfile; then
    add_error "Dockerfile ainda referencia diret√≥rio packages/"
else
    success "‚úì Dockerfile n√£o referencia packages/"
fi

if grep -q 'yarn install.*--frozen-lockfile' Dockerfile; then
    success "‚úì Dockerfile usa --frozen-lockfile"
else
    warning "Dockerfile pode n√£o usar --frozen-lockfile"
fi

# Verificar depend√™ncias cr√≠ticas
log "Verificando depend√™ncias cr√≠ticas..."

if grep -q '"express"' server/package.json; then
    success "‚úì Express encontrado em server/package.json"
else
    add_error "Express n√£o encontrado em server/package.json"
fi

if grep -q '"@prisma/client"' server/package.json; then
    success "‚úì Prisma client encontrado"
else
    add_error "Prisma client n√£o encontrado"
fi

if grep -q '"next"' apps/admin/package.json; then
    success "‚úì Next.js encontrado em apps/admin/package.json"
else
    add_error "Next.js n√£o encontrado em apps/admin/package.json"
fi

# Verificar scripts do servidor
log "Verificando scripts do servidor..."

if [[ -f "server/src/index.js" ]]; then
    if grep -q 'app.listen' server/src/index.js; then
        success "‚úì Servidor configurado para listen"
    else
        add_error "Servidor n√£o configurado para listen"
    fi
    
    if grep -q '/health' server/src/index.js; then
        success "‚úì Health check endpoint encontrado"
    else
        add_error "Health check endpoint n√£o encontrado"
    fi
else
    add_error "server/src/index.js n√£o encontrado"
fi

# Verificar schema do Prisma
log "Verificando schema do Prisma..."

if grep -q 'provider.*=.*"sqlite"' server/prisma/schema.prisma; then
    success "‚úì SQLite configurado no schema"
else
    warning "SQLite pode n√£o estar configurado"
fi

# Verificar .dockerignore
log "Verificando .dockerignore..."

if [[ -f ".dockerignore" ]]; then
    if grep -q 'node_modules' .dockerignore; then
        success "‚úì .dockerignore ignora node_modules"
    else
        warning ".dockerignore pode n√£o ignorar node_modules"
    fi
    
    if grep -q '.env' .dockerignore; then
        success "‚úì .dockerignore ignora .env"
    else
        warning ".dockerignore pode n√£o ignorar .env"
    fi
else
    add_error ".dockerignore n√£o encontrado"
fi

# Resultado final
echo ""
echo "üîç =============================================="
echo "üîç RESULTADO DA VALIDA√á√ÉO"
echo "üîç =============================================="

if [[ $ERRORS -eq 0 ]]; then
    success "üéâ VALIDA√á√ÉO PASSOU! Nenhum erro encontrado."
    echo ""
    echo "‚úÖ Arquivos essenciais: OK"
    echo "‚úÖ Estrutura de diret√≥rios: OK"
    echo "‚úÖ Configura√ß√µes: OK"
    echo "‚úÖ Depend√™ncias: OK"
    echo ""
    echo "üöÄ Projeto pronto para deploy no Easypanel!"
    echo ""
    echo "Para fazer o deploy:"
    echo "1. git add ."
    echo "2. git commit -m \"fix: corrigir configura√ß√µes Docker e Next.js\""  
    echo "3. git push"
    echo "4. Deploy no Easypanel"
    exit 0
else
    error "‚ùå VALIDA√á√ÉO FALHOU! $ERRORS erro(s) encontrado(s)."
    echo ""
    echo "Por favor, corrija os erros acima antes de fazer o deploy."
    exit 1
fi 